class UnionFind {
	public:
	int par[100009];
	int siz[100009];

	void init(int N) {
		for (int i = 1; i <= N; i++) par[i] = -1;
		for (int i = 1; i <= N; i++) siz[i] = 1;
	}

	int root(int x) {
		while (true) {
			if (par[x] == -1) break;
			x = par[x];
		}
		return x;
	}

	void unite(int u, int v) {
		int rootU = root(u);
		int rootV = root(v);
		if (rootU == rootV) return;
		if (siz[rootU] < siz[rootV]) {
			par[rootU] = rootV;
			siz[rootV] = siz[rootU] + siz[rootV];
		}
		else {
			par[rootV] = rootU;
			siz[rootU] = siz[rootU] + siz[rootV];
		}
	}

	bool same(int u, int v) {
		if (root(u) == root(v)) return true;
		return false;
	}
};